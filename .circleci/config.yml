version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  python: circleci/python@1.2
  node: circleci/node@2.0.2 

defaults: &defaults-node
  docker:
    - image: cimg/node:16.12.0

commands:
  print_pipeline_id:
    description: "A very simple command for demonstration purposes"
    parameters:
      echo_suffix:
        type: string
        default: ""
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID << parameters.echo_suffix >>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: 
    docker:
      - image: cimg/python:3.9.7
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: pytest tests/dummy.py
      - run: 
          command: ${MY_ENV_VAR_NAME}
  print_hello:
    environment:
        param1: hello
    docker: 
      - image: cimg/node:16.12.0
    steps:
      - checkout
      - run:
          name: Print hello
          command: node node_echo.js ${param1}
  print_world:
    docker: 
      - image: cimg/node:16.12.0
    steps:
      - checkout
      - run:
          name: Print hello
          command: node node_echo.js world      
      - run: echo "Pipeline.ID = << pipeline.id >> branch = << pipeline.git.branch >>"

  save_hello_world_output:
    environment:
        param1: hello 
    docker: 
      - image: cimg/node:16.12.0
    steps:    
      - run: echo ${param1} ${MY_ENV_VAR_NAME} > output.txt
      - save_cache:
          key: my-cache-output.txt
          paths:
            - output.txt

  read_hello_world_output:    
    docker: 
      - image: cimg/node:16.12.0
    steps:    
      - restore_cache:
          keys:
            - my-cache-output.txt
      - run: cat output.txt
      - print_pipeline_id:
          echo_suffix: "!!!"

  intentional_failure_test:  
    <<: defaults-node
    steps:
      - run: return 1
      - run: 
          command: echo "error occured"
          when: on_fail

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  error-handling-test-job:
    jobs:
      - intentional_failure_test

  # share-files-between-jobs-workflow:
  #   jobs:
  #     - save_hello_world_output
  #     - read_hello_world_output:
  #         requires:
  #           - save_hello_world_output
      
  # sample-workflow-for-nodejs:
  #   jobs: 
  #     - print_hello
  #     - print_world:
  #         requires: 
  #           - print_hello
  
  # sample-workflow-for-python: 
  #   jobs:
  #     - build-and-test
  